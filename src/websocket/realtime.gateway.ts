import {
  WebSocketGateway,
  WebSocketServer,
  SubscribeMessage,
  OnGatewayConnection,
  OnGatewayDisconnect,
  ConnectedSocket,
  MessageBody,
} from '@nestjs/websockets';
import { Server, Socket } from 'socket.io';
import { Injectable } from '@nestjs/common';
import { JwtService } from '@nestjs/jwt';
import { ConfigService } from '@nestjs/config';
import { UserService } from '../user/user.service';
import { RankingService } from '../ranking/ranking.service';

interface AuthenticatedSocket extends Socket {
  userId?: string;
  username?: string;
}

@Injectable()
@WebSocketGateway({
  cors: {
    origin: '*',
    credentials: true,
  },
  namespace: '/realtime',
})
export class RealtimeGateway implements OnGatewayConnection, OnGatewayDisconnect {
  @WebSocketServer()
  server: Server;

  private connectedUsers = new Map<string, AuthenticatedSocket>();

  constructor(
    private readonly jwtService: JwtService,
    private readonly configService: ConfigService,
    private readonly userService: UserService,
    private readonly rankingService: RankingService,
  ) {}

  // –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async handleConnection(client: AuthenticatedSocket) {
    try {
      // –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –∏–∑ query –∏–ª–∏ headers
      const token = client.handshake.auth?.token || 
                   client.handshake.query?.token ||
                   client.handshake.headers?.authorization?.replace('Bearer ', '');

      if (!token) {
        client.disconnect();
        return;
      }

      // –í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä—É–µ–º —Ç–æ–∫–µ–Ω
      const payload = this.jwtService.verify(token, {
        secret: this.configService.get('JWT_SECRET'),
      });

      // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const user = await this.userService.findById(payload.sub);
      if (!user || !user.isActive) {
        client.disconnect();
        return;
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      client.userId = user.id;
      client.username = user.username;
      this.connectedUsers.set(user.id, client);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–Ω–ª–∞–π–Ω
      await this.userService.updateOnlineStatus(user.id, true);

      // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫ –ª–∏—á–Ω–æ–π –∫–æ–º–Ω–∞—Ç–µ
      client.join(`user:${user.id}`);

      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
      client.emit('connected', {
        message: '–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ',
        userId: user.id,
        username: user.username,
      });

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤—Å–µ–º
      this.broadcastOnlineUsers();

      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.username} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è`);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏:', error);
      client.disconnect();
    }
  }

  // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async handleDisconnect(client: AuthenticatedSocket) {
    if (client.userId) {
      this.connectedUsers.delete(client.userId);
      
      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ñ—Ñ–ª–∞–π–Ω
      await this.userService.updateOnlineStatus(client.userId, false);
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º –æ–± –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏
      this.broadcastOnlineUsers();
      
      console.log(`üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${client.username} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`);
    }
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞
  @SubscribeMessage('subscribe:ranking')
  async handleSubscribeRanking(@ConnectedSocket() client: AuthenticatedSocket) {
    if (!client.userId) return;
    
    client.join('ranking-updates');
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥
    const ranking = await this.rankingService.getRanking({ limit: 10 });
    client.emit('ranking:update', ranking);
  }

  // –û—Ç–ø–∏—Å–∫–∞ –æ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π —Ä–µ–π—Ç–∏–Ω–≥–∞
  @SubscribeMessage('unsubscribe:ranking')
  handleUnsubscribeRanking(@ConnectedSocket() client: AuthenticatedSocket) {
    client.leave('ranking-updates');
  }

  // –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  @SubscribeMessage('subscribe:user')
  handleSubscribeUser(
    @ConnectedSocket() client: AuthenticatedSocket,
    @MessageBody() data: { userId: string },
  ) {
    if (!client.userId) return;
    
    client.join(`user-updates:${data.userId}`);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  @SubscribeMessage('get:online-users')
  async handleGetOnlineUsers(@ConnectedSocket() client: AuthenticatedSocket) {
    if (!client.userId) return;
    
    const onlineUsers = await this.userService.getOnlineUsers();
    client.emit('online-users', onlineUsers);
  }

  // –ü–∏–Ω–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  @SubscribeMessage('ping')
  handlePing(@ConnectedSocket() client: AuthenticatedSocket) {
    client.emit('pong', { timestamp: new Date().toISOString() });
  }

  // –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
  async broadcastRankingUpdate() {
    const ranking = await this.rankingService.getRanking({ limit: 10 });
    this.server.to('ranking-updates').emit('ranking:update', ranking);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  async broadcastUserUpdate(userId: string, userData: any) {
    this.server.to(`user-updates:${userId}`).emit('user:update', userData);
    this.server.to(`user:${userId}`).emit('profile:update', userData);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ –ª–∏—á–Ω–æ–≥–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
  async sendToUser(userId: string, event: string, data: any) {
    this.server.to(`user:${userId}`).emit(event, data);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
  async broadcastToAll(event: string, data: any) {
    this.server.emit(event, data);
  }

  // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ø–∏—Å–∫–∞ –æ–Ω–ª–∞–π–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  private async broadcastOnlineUsers() {
    const onlineUsers = await this.userService.getOnlineUsers();
    this.server.emit('online-users', onlineUsers);
  }

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö
  getConnectedUsersCount(): number {
    return this.connectedUsers.size;
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
  isUserConnected(userId: string): boolean {
    return this.connectedUsers.has(userId);
  }
}
