{
  "info": {
    "name": "API Gateway - NestJS",
    "description": "–ü–æ–ª–Ω–∞—è –∫–æ–ª–ª–µ–∫—Ü–∏—è –¥–ª—è API Gateway —Å –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–µ–π –∏ —Ä–µ–π—Ç–∏–Ω–≥–æ–º",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:3000",
      "type": "string"
    },
    {
      "key": "accessToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "refreshToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "temporaryToken",
      "value": "",
      "type": "string"
    },
    {
      "key": "userId",
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "üîê Authentication",
      "item": [
        {
          "name": "1. –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "url": {
              "raw": "{{baseUrl}}/auth/token/temporary",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "token", "temporary"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('temporaryToken', response.token);",
                  "    console.log('–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω —Å–æ—Ö—Ä–∞–Ω—ë–Ω:', response.token);",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "2. –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\",\n  \"registrationToken\": \"{{temporaryToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/register",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "register"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 201) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    console.log('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, —Ç–æ–∫–µ–Ω—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "3. –í—Ö–æ–¥ –ø–æ –ª–æ–≥–∏–Ω—É –∏ –ø–∞—Ä–æ–ª—é",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"username\": \"testuser\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.refreshToken);",
                  "    pm.collectionVariables.set('userId', response.user.id);",
                  "    console.log('–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥, —Ç–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "4. –í—Ö–æ–¥ –ø–æ –≤—Ä–µ–º–µ–Ω–Ω–æ–º—É —Ç–æ–∫–µ–Ω—É",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{temporaryToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/login/token",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "login", "token"]
            }
          }
        },
        {
          "name": "5. –í–∞–ª–∏–¥–∞—Ü–∏—è —Ç–æ–∫–µ–Ω–∞",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"token\": \"{{accessToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/token/validate",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "token", "validate"]
            }
          }
        },
        {
          "name": "6. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\",\n  \"password\": \"password123\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/token/refresh",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "token", "refresh"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    const response = pm.response.json();",
                  "    pm.collectionVariables.set('accessToken', response.accessToken);",
                  "    pm.collectionVariables.set('refreshToken', response.refreshToken);",
                  "    console.log('–¢–æ–∫–µ–Ω—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã');",
                  "}"
                ]
              }
            }
          ]
        },
        {
          "name": "7. –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
          "request": {
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "value": "application/json"
              },
              {
                "key": "Authorization",
                "value": "Bearer {{accessToken}}"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
            },
            "url": {
              "raw": "{{baseUrl}}/auth/logout",
              "host": ["{{baseUrl}}"],
              "path": ["auth", "logout"]
            }
          },
          "event": [
            {
              "listen": "test",
              "script": {
                "exec": [
                  "if (pm.response.code === 200) {",
                  "    pm.collectionVariables.set('accessToken', '');",
                  "    pm.collectionVariables.set('refreshToken', '');",
                  "    console.log('–£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');",
                  "}"
                ]
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üìä Ranking",
      "item": [
        {
          "name": "1. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/ranking",
              "host": ["{{baseUrl}}"],
              "path": ["ranking"]
            }
          }
        },
        {
          "name": "2. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –±–∞–ª–∞–Ω—Å—É",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/ranking?type=balance&limit=20&offset=0",
              "host": ["{{baseUrl}}"],
              "path": ["ranking"],
              "query": [
                {
                  "key": "type",
                  "value": "balance"
                },
                {
                  "key": "limit",
                  "value": "20"
                },
                {
                  "key": "offset",
                  "value": "0"
                }
              ]
            }
          }
        },
        {
          "name": "3. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ IQ",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/ranking?type=iq&limit=15",
              "host": ["{{baseUrl}}"],
              "path": ["ranking"],
              "query": [
                {
                  "key": "type",
                  "value": "iq"
                },
                {
                  "key": "limit",
                  "value": "15"
                }
              ]
            }
          }
        },
        {
          "name": "4. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ —É—Ä–æ–≤–Ω—é",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/ranking?type=level&limit=10",
              "host": ["{{baseUrl}}"],
              "path": ["ranking"],
              "query": [
                {
                  "key": "type",
                  "value": "level"
                },
                {
                  "key": "limit",
                  "value": "10"
                }
              ]
            }
          }
        },
        {
          "name": "5. –ü–æ–ª—É—á–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ –≤–∏–Ω—Ä–µ–π—Ç—É",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/ranking?type=winRate&limit=25",
              "host": ["{{baseUrl}}"],
              "path": ["ranking"],
              "query": [
                {
                  "key": "type",
                  "value": "winRate"
                },
                {
                  "key": "limit",
                  "value": "25"
                }
              ]
            }
          }
        },
        {
          "name": "6. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/ranking/user/{{userId}}/position",
              "host": ["{{baseUrl}}"],
              "path": ["ranking", "user", "{{userId}}", "position"]
            }
          }
        },
        {
          "name": "7. –ü–æ–ª—É—á–∏—Ç—å –ø–æ–∑–∏—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ —Ç–∏–ø—É",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/ranking/user/{{userId}}/position?type=balance",
              "host": ["{{baseUrl}}"],
              "path": ["ranking", "user", "{{userId}}", "position"],
              "query": [
                {
                  "key": "type",
                  "value": "balance"
                }
              ]
            }
          }
        },
        {
          "name": "8. –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–µ–π—Ç–∏–Ω–≥–∞",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}/ranking/stats",
              "host": ["{{baseUrl}}"],
              "path": ["ranking", "stats"]
            }
          }
        }
      ]
    },
    {
      "name": "üß™ Test Scenarios",
      "item": [
        {
          "name": "–ü–æ–ª–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏",
          "item": [
            {
              "name": "1. –ü–æ–ª—É—á–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ç–æ–∫–µ–Ω",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "url": {
                  "raw": "{{baseUrl}}/auth/token/temporary",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "token", "temporary"]
                }
              }
            },
            {
              "name": "2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"username\": \"newuser{{$randomInt}}\",\n  \"password\": \"testpass123\",\n  \"registrationToken\": \"{{temporaryToken}}\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/register",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "register"]
                }
              }
            },
            {
              "name": "3. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
              "request": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{baseUrl}}/ranking/user/{{userId}}/position",
                  "host": ["{{baseUrl}}"],
                  "path": ["ranking", "user", "{{userId}}", "position"]
                }
              }
            },
            {
              "name": "4. –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã",
              "request": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "value": "application/json"
                  },
                  {
                    "key": "Authorization",
                    "value": "Bearer {{accessToken}}"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": "{\n  \"refreshToken\": \"{{refreshToken}}\"\n}"
                },
                "url": {
                  "raw": "{{baseUrl}}/auth/logout",
                  "host": ["{{baseUrl}}"],
                  "path": ["auth", "logout"]
                }
              }
            }
          ]
        }
      ]
    },
    {
      "name": "üîß Environment Setup",
      "item": [
        {
          "name": "Health Check",
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{baseUrl}}",
              "host": ["{{baseUrl}}"]
            }
          }
        }
      ]
    }
  ],
  "auth": {
    "type": "bearer",
    "bearer": [
      {
        "key": "token",
        "value": "{{accessToken}}",
        "type": "string"
      }
    ]
  },
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "type": "text/javascript",
        "exec": [
          "// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ Authorization header –¥–ª—è –∑–∞—â–∏—â—ë–Ω–Ω—ã—Ö —ç–Ω–¥–ø–æ–∏–Ω—Ç–æ–≤",
          "if (pm.collectionVariables.get('accessToken')) {",
          "    pm.request.headers.add({",
          "        key: 'Authorization',",
          "        value: 'Bearer ' + pm.collectionVariables.get('accessToken')",
          "    });",
          "}"
        ]
      }
    }
  ]
}
